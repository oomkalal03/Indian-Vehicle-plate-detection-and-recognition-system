{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Airline_Cancelation_BDA_Project.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2fqdZNqv46LS"
      },
      "source": [
        "# **Big Data with Spark in Google Colab**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0Syk1cKh_nsb"
      },
      "source": [
        "## Spark and Colaboratory setup"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "! pip install kaggle"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nMVaZkB84sqv",
        "outputId": "64637990-ff81-4c15-cf9e-19aa7619c6a4"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: kaggle in /usr/local/lib/python3.7/dist-packages (1.5.12)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from kaggle) (4.62.3)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.7/dist-packages (from kaggle) (2.8.2)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.7/dist-packages (from kaggle) (2021.10.8)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.7/dist-packages (from kaggle) (1.15.0)\n",
            "Requirement already satisfied: python-slugify in /usr/local/lib/python3.7/dist-packages (from kaggle) (5.0.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from kaggle) (2.23.0)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.7/dist-packages (from kaggle) (1.24.3)\n",
            "Requirement already satisfied: text-unidecode>=1.3 in /usr/local/lib/python3.7/dist-packages (from python-slugify->kaggle) (1.3)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->kaggle) (2.10)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->kaggle) (3.0.4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "! mkdir ~/.kaggle"
      ],
      "metadata": {
        "id": "QsIxrdk84ysH"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "! cp kaggle.json ~/.kaggle/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gAtoQxNc41Av",
        "outputId": "205e161c-a091-4251-85ab-c3ec9d0796d3"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cp: cannot stat 'kaggle.json': No such file or directory\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "! kaggle competitions download <Airline on-time Performance Data>\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mF6YhKP542xX",
        "outputId": "a4cd2fc6-0e2e-4459-e7cf-1d613c115948"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/bin/bash: -c: line 0: syntax error near unexpected token `newline'\n",
            "/bin/bash: -c: line 0: ` kaggle competitions download <Airline on-time Performance Data>'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eTsyMSUy17fM",
        "outputId": "d953029d-71fe-4e4c-9ebf-7dea4977575b"
      },
      "source": [
        "# Install spark-related depdencies for Python\n",
        "\n",
        "!apt-get install openjdk-8-jdk-headless -qq > /dev/null\n",
        "!wget -q http://apache.osuosl.org/spark/spark-3.0.1/spark-3.0.1-bin-hadoop3.2.tgz\n",
        "# unzip it\n",
        "!tar xf spark-3.0.1-bin-hadoop3.2.tgz\n",
        "\n",
        "!pip install -q findspark\n",
        "!pip install pyspark\n",
        "!pip install -U -q PyDrive"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting pyspark\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/f0/26/198fc8c0b98580f617cb03cb298c6056587b8f0447e20fa40c5b634ced77/pyspark-3.0.1.tar.gz (204.2MB)\n",
            "\u001b[K     |████████████████████████████████| 204.2MB 64kB/s \n",
            "\u001b[?25hCollecting py4j==0.10.9\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/9e/b6/6a4fb90cd235dc8e265a6a2067f2a2c99f0d91787f06aca4bcf7c23f3f80/py4j-0.10.9-py2.py3-none-any.whl (198kB)\n",
            "\u001b[K     |████████████████████████████████| 204kB 41.5MB/s \n",
            "\u001b[?25hBuilding wheels for collected packages: pyspark\n",
            "  Building wheel for pyspark (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pyspark: filename=pyspark-3.0.1-py2.py3-none-any.whl size=204612243 sha256=e1cabc3a8a178dd6d0fdc6afc40d86cec0cd782efc196a2d378b61956f8b4218\n",
            "  Stored in directory: /root/.cache/pip/wheels/5e/bd/07/031766ca628adec8435bb40f0bd83bb676ce65ff4007f8e73f\n",
            "Successfully built pyspark\n",
            "Installing collected packages: py4j, pyspark\n",
            "Successfully installed py4j-0.10.9 pyspark-3.0.1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Install spark-related depdencies for Python\n",
        "\n",
        "!apt-get install openjdk-8-jdk-headless -qq > /dev/null\n",
        "!wget -q http://apache.osuosl.org/spark/spark-3.0.1/spark-3.0.1-bin-hadoop3.2.tgz\n",
        "# unzip it\n",
        "!tar xf spark-3.0.1-bin-hadoop3.2.tgz\n",
        "\n",
        "!pip install -q findspark\n",
        "!pip install pyspark\n",
        "!pip install -U -q PyDrive"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N9TcHmQL4-0y",
        "outputId": "4d649316-97f7-48b9-ae6e-122721e8448e"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "E: Failed to fetch http://security.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jre-headless_8u292-b10-0ubuntu1~18.04_amd64.deb  404  Not Found [IP: 91.189.88.142 80]\n",
            "E: Failed to fetch http://security.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jdk-headless_8u292-b10-0ubuntu1~18.04_amd64.deb  404  Not Found [IP: 91.189.88.142 80]\n",
            "E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?\n",
            "tar: spark-3.0.1-bin-hadoop3.2.tgz: Cannot open: No such file or directory\n",
            "tar: Error is not recoverable: exiting now\n",
            "Collecting pyspark\n",
            "  Downloading pyspark-3.2.0.tar.gz (281.3 MB)\n",
            "\u001b[K     |████████████████████████████████| 281.3 MB 39 kB/s \n",
            "\u001b[?25hCollecting py4j==0.10.9.2\n",
            "  Downloading py4j-0.10.9.2-py2.py3-none-any.whl (198 kB)\n",
            "\u001b[K     |████████████████████████████████| 198 kB 40.5 MB/s \n",
            "\u001b[?25hBuilding wheels for collected packages: pyspark\n",
            "  Building wheel for pyspark (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pyspark: filename=pyspark-3.2.0-py2.py3-none-any.whl size=281805912 sha256=2195f6cb22f0250a02c70aa9e7bee64128bd6a2ac36ee5b7f2413b4168358a1f\n",
            "  Stored in directory: /root/.cache/pip/wheels/0b/de/d2/9be5d59d7331c6c2a7c1b6d1a4f463ce107332b1ecd4e80718\n",
            "Successfully built pyspark\n",
            "Installing collected packages: py4j, pyspark\n",
            "Successfully installed py4j-0.10.9.2 pyspark-3.2.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%matplotlib inline\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import datetime as dt\n",
        "import altair as alt"
      ],
      "metadata": {
        "id": "5p0ybOvF5cNv"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mzb8TQXf2DWr"
      },
      "source": [
        "# Set up required environment variables\n",
        "\n",
        "import os\n",
        "os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"\n",
        "os.environ[\"SPARK_HOME\"] = \"/content/spark-3.0.1-bin-hadoop3.2\""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PzUr-r3Y2F6r",
        "outputId": "6c16c982-45b0-4b68-a2a7-8d42d4c0cb8a"
      },
      "source": [
        "# Point Colaboratory to your Google Drive\n",
        "\n",
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XMnnHpLcDZKw"
      },
      "source": [
        "##  **Import** tools from PySpark\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lgTbo49l2H_D"
      },
      "source": [
        "# Tools we need to connect to the Spark server, load our data, clean it, and prepare, execute, and evaluate a model\n",
        "from pyspark import SparkContext, SparkConf\n",
        "from pyspark.sql import SparkSession\n",
        "\n",
        "from pyspark.ml import Pipeline\n",
        "from pyspark.ml.classification import RandomForestClassifier\n",
        "from pyspark.ml.feature import IndexToString, StringIndexer, VectorIndexer, VectorAssembler\n",
        "from pyspark.ml.evaluation import MulticlassClassificationEvaluator\n",
        "\n",
        "from pyspark.sql.functions import isnan, when, count, col"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gnY4vcKuDDvo"
      },
      "source": [
        "## Set Constants"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oARjpzRGz2Aj"
      },
      "source": [
        "CSV_1987= \"/content/gdrive/My Drive/Colab Datasets/1987.csv.bz2\"\n",
        "CSV_1988= \"/content/gdrive/My Drive/Colab Datasets/1988.csv.bz2\"\n",
        "CSV_1989= \"/content/gdrive/My Drive/Colab Datasets/1989.csv.bz2\"\n",
        "CSV_1990= \"/content/gdrive/My Drive/Colab Datasets/1990.csv.bz2\"\n",
        "CSV_1991= \"/content/gdrive/My Drive/Colab Datasets/1991.csv.bz2\"\n",
        "CSV_1992= \"/content/gdrive/My Drive/Colab Datasets/1992.csv.bz2\"\n",
        "CSV_1993= \"/content/gdrive/My Drive/Colab Datasets/1993.csv.bz2\"\n",
        "CSV_1994= \"/content/gdrive/My Drive/Colab Datasets/1994.csv.bz2\"\n",
        "CSV_1995= \"/content/gdrive/My Drive/Colab Datasets/1995.csv.bz2\"\n",
        "CSV_1996= \"/content/gdrive/My Drive/Colab Datasets/1996.csv.bz2\"\n",
        "CSV_1997= \"/content/gdrive/My Drive/Colab Datasets/1997.csv.bz2\"\n",
        "CSV_1998= \"/content/gdrive/My Drive/Colab Datasets/1998.csv.bz2\"\n",
        "CSV_1999= \"/content/gdrive/My Drive/Colab Datasets/1999.csv.bz2\" \n",
        "CSV_2000= \"/content/gdrive/My Drive/Colab Datasets/2000.csv.bz2\" \n",
        "CSV_2001= \"/content/gdrive/My Drive/Colab Datasets/2001.csv.bz2\" \n",
        "CSV_2002= \"/content/gdrive/My Drive/Colab Datasets/2002.csv.bz2\"\n",
        "CSV_2003= \"/content/gdrive/My Drive/Colab Datasets/2003.csv.bz2\" \n",
        "CSV_2004= \"/content/gdrive/My Drive/Colab Datasets/2004.csv.bz2\" \n",
        "CSV_2005= \"/content/gdrive/My Drive/Colab Datasets/2005.csv.bz2\" \n",
        "CSV_2006= \"/content/gdrive/My Drive/Colab Datasets/2006.csv.bz2\" \n",
        "CSV_2007= \"/content/gdrive/My Drive/Colab Datasets/2007.csv.bz2\" \n",
        "CSV_2008= \"/content/gdrive/My Drive/Colab Datasets/2008.csv.bz2\""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ypM4p5ti9i-s"
      },
      "source": [
        "APP_NAME = \"Flight Delays\"\n",
        "SPARK_URL = \"local[*]\"\n",
        "RANDOM_SEED = 141109\n",
        "TRAINING_DATA_RATIO = 0.7\n",
        "RF_NUM_TREES = 8\n",
        "RF_MAX_DEPTH = 4\n",
        "RF_NUM_BINS = 32"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N0FRbSOUDMRJ"
      },
      "source": [
        "## Connect to the server and load data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "I5AlE_w-3jUg"
      },
      "source": [
        "import findspark\n",
        "findspark.init()\n",
        "# Connect to the Spark server\n",
        "\n",
        "spark = SparkSession.builder.appName(APP_NAME).master(SPARK_URL).getOrCreate()\n",
        "config = SparkConf().setAll([('spark.executor.memory', '8g'),\n",
        "                             ('spark.executor.cores', '3'),\n",
        "                             ('spark.cores.max', '3'),\n",
        "                             ('spark.driver.memory','8g'),\n",
        "                             ('spark.ui.port', '4050')\n",
        "                             ])\n",
        "# sc = SparkContext(conf=config)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 216
        },
        "id": "mFnt47P9DQ55",
        "outputId": "32aacd11-0c58-486b-d7b9-2bf43ccda5be"
      },
      "source": [
        "spark"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "            <div>\n",
              "                <p><b>SparkSession - in-memory</b></p>\n",
              "                \n",
              "        <div>\n",
              "            <p><b>SparkContext</b></p>\n",
              "\n",
              "            <p><a href=\"http://37d751c03dfb:4040\">Spark UI</a></p>\n",
              "\n",
              "            <dl>\n",
              "              <dt>Version</dt>\n",
              "                <dd><code>v3.0.1</code></dd>\n",
              "              <dt>Master</dt>\n",
              "                <dd><code>local[*]</code></dd>\n",
              "              <dt>AppName</dt>\n",
              "                <dd><code>Flight Delays</code></dd>\n",
              "            </dl>\n",
              "        </div>\n",
              "        \n",
              "            </div>\n",
              "        "
            ],
            "text/plain": [
              "<pyspark.sql.session.SparkSession at 0x7f9c61cf6f28>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yJMN2rKjDST2",
        "outputId": "1101bf92-bcd3-4554-a7ed-f9e8740604a9"
      },
      "source": [
        "!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip\n",
        "!unzip ngrok-stable-linux-amd64.zip\n",
        "get_ipython().system_raw('./ngrok http 4050 &')\n",
        "!curl -s http://localhost:4040/api/tunnels"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2020-11-25 12:06:08--  https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip\n",
            "Resolving bin.equinox.io (bin.equinox.io)... 34.193.208.150, 3.90.94.177, 34.234.81.220, ...\n",
            "Connecting to bin.equinox.io (bin.equinox.io)|34.193.208.150|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 13773305 (13M) [application/octet-stream]\n",
            "Saving to: ‘ngrok-stable-linux-amd64.zip.3’\n",
            "\n",
            "ngrok-stable-linux- 100%[===================>]  13.13M  6.58MB/s    in 2.0s    \n",
            "\n",
            "2020-11-25 12:06:11 (6.58 MB/s) - ‘ngrok-stable-linux-amd64.zip.3’ saved [13773305/13773305]\n",
            "\n",
            "Archive:  ngrok-stable-linux-amd64.zip\n",
            "replace ngrok? [y]es, [n]o, [A]ll, [N]one, [r]ename: n\n",
            "<html>\n",
            "<head>\n",
            "<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n",
            "<title>Error 404 Not Found</title>\n",
            "</head>\n",
            "<body><h2>HTTP ERROR 404</h2>\n",
            "<p>Problem accessing /api/tunnels. Reason:\n",
            "<pre>    Not Found</pre></p><hr><a href=\"http://eclipse.org/jetty\">Powered by Jetty:// 9.4.z-SNAPSHOT</a><hr/>\n",
            "\n",
            "</body>\n",
            "</html>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L2IEuWC2sSXY",
        "outputId": "c9fc0394-2808-477a-9fa1-58f4fae0b949"
      },
      "source": [
        "spark.sparkContext._conf.getAll()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('spark.driver.host', '37d751c03dfb'),\n",
              " ('spark.app.name', 'Flight Delays'),\n",
              " ('spark.driver.port', '36957'),\n",
              " ('spark.rdd.compress', 'True'),\n",
              " ('spark.app.id', 'local-1606292439007'),\n",
              " ('spark.serializer.objectStreamReset', '100'),\n",
              " ('spark.master', 'local[*]'),\n",
              " ('spark.submit.pyFiles', ''),\n",
              " ('spark.executor.id', 'driver'),\n",
              " ('spark.submit.deployMode', 'client'),\n",
              " ('spark.ui.showConsoleProgress', 'true')]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XhuA3T8y2Z1M",
        "outputId": "b88338e9-c127-47e9-d26c-ec82c8c72fd6"
      },
      "source": [
        "spark.sparkContext._jsc.sc().getExecutorMemoryStatus()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "JavaObject id=o65"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HdyJMcRfq_j4",
        "outputId": "5627e214-7a93-4206-b81d-849908758e15"
      },
      "source": [
        "# Load datasets\n",
        "\n",
        "df_1987 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_1987)\n",
        "df_1988 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_1988)\n",
        "df_1989 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_1989)\n",
        "df_1990 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_1990)\n",
        "df_1991 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_1991)\n",
        "df_1992 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_1992)\n",
        "df_1993 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_1993)\n",
        "df_1994 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_1994)\n",
        "df_1995 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_1995)\n",
        "df_1996 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_1996)\n",
        "df_1997 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_1997)\n",
        "df_1998 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_1998)\n",
        "df_1999 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_1999)\n",
        "df_2000 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_2000)\n",
        "df_2001 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_2001)\n",
        "df_2002 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_2002)\n",
        "df_2003 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_2003)\n",
        "df_2004 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_2004)\n",
        "df_2005 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_2005)\n",
        "df_2006 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_2006)\n",
        "df_2007 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_2007)\n",
        "df_2008 = spark.read.options(header=\"true\",inferschema = \"true\").csv(CSV_2008)\n",
        "print(\"Loaded All Dataset\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Loaded All Dataset\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XwW8YDlJT8nT"
      },
      "source": [
        "# We concatenate all datasets\n",
        "from functools import reduce\n",
        "from pyspark.sql import DataFrame\n",
        "dfs = [\n",
        "       df_1987,df_1988,df_1989,\n",
        "       df_1990,df_1991,df_1992,df_1993,df_1994,df_1995,df_1996,df_1997,df_1998,df_1999,\n",
        "       df_2000,df_2001,df_2002,df_2003,df_2004,df_2005,df_2006,\n",
        "       df_2007,df_2008\n",
        "       ]\n",
        "df = reduce(DataFrame.unionAll, dfs)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bMND_BX1ewlB"
      },
      "source": [
        "## Prepare, clean and validate the data\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RcuffbHxe1ae",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cea824d4-e0c1-4d5f-a591-1d063e1bcaa8"
      },
      "source": [
        "# What's the data shape before starting cleaning ?\n",
        "\n",
        "print(f\"The shape is {df.count():d} rows by {len(df.columns):d} columns.\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The shape is 14462943 rows by 29 columns.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JJhI6Spnwcbk",
        "outputId": "a614461b-bd1e-4e59-8991-207a446eb059"
      },
      "source": [
        "#display to 20 rows\n",
        "df.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "+----+-----+----------+---------+-------+----------+-------+----------+-------------+---------+-------+-----------------+--------------+-------+--------+--------+------+----+--------+------+-------+---------+--------+------------+------------+--------+-------------+-----------------+--------------------+\n",
            "|Year|Month|DayofMonth|DayOfWeek|DepTime|CRSDepTime|ArrTime|CRSArrTime|UniqueCarrier|FlightNum|TailNum|ActualElapsedTime|CRSElapsedTime|AirTime|ArrDelay|DepDelay|Origin|Dest|Distance|TaxiIn|TaxiOut|Cancelled|Diverted|CarrierDelay|WeatherDelay|NASDelay|SecurityDelay|LateAircraftDelay|            features|\n",
            "+----+-----+----------+---------+-------+----------+-------+----------+-------------+---------+-------+-----------------+--------------+-------+--------+--------+------+----+--------+------+-------+---------+--------+------------+------------+--------+-------------+-----------------+--------------------+\n",
            "|2007|    1|         1|        1|   1232|      1225|   1341|      1340|           WN|     2891|   N351|               69|            75|     54|       1|       7|   SMF| ONT|     389|     4|     11|        0|       0|           0|           0|       0|            0|                0|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|   1918|      1905|   2043|      2035|           WN|      462|   N370|               85|            90|     74|       8|      13|   SMF| PDX|     479|     5|      6|        0|       0|           0|           0|       0|            0|                0|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|   2206|      2130|   2334|      2300|           WN|     1229|   N685|               88|            90|     73|      34|      36|   SMF| PDX|     479|     6|      9|        0|       0|           3|           0|       0|            0|               31|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|   1230|      1200|   1356|      1330|           WN|     1355|   N364|               86|            90|     75|      26|      30|   SMF| PDX|     479|     3|      8|        0|       0|          23|           0|       0|            0|                3|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|    831|       830|    957|      1000|           WN|     2278|   N480|               86|            90|     74|      -3|       1|   SMF| PDX|     479|     3|      9|        0|       0|           0|           0|       0|            0|                0|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|   1430|      1420|   1553|      1550|           WN|     2386| N611SW|               83|            90|     74|       3|      10|   SMF| PDX|     479|     2|      7|        0|       0|           0|           0|       0|            0|                0|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|   1936|      1840|   2217|      2130|           WN|      409|   N482|              101|           110|     89|      47|      56|   SMF| PHX|     647|     5|      7|        0|       0|          46|           0|       0|            0|                1|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|    944|       935|   1223|      1225|           WN|     1131| N749SW|               99|           110|     86|      -2|       9|   SMF| PHX|     647|     4|      9|        0|       0|           0|           0|       0|            0|                0|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|   1537|      1450|   1819|      1735|           WN|     1212|   N451|              102|           105|     90|      44|      47|   SMF| PHX|     647|     5|      7|        0|       0|          20|           0|       0|            0|               24|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|   1318|      1315|   1603|      1610|           WN|     2456| N630WN|              105|           115|     92|      -7|       3|   SMF| PHX|     647|     5|      8|        0|       0|           0|           0|       0|            0|                0|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|    836|       835|   1119|      1130|           WN|     2575|   N493|              103|           115|     88|     -11|       1|   SMF| PHX|     647|     7|      8|        0|       0|           0|           0|       0|            0|                0|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|   2047|      1955|   2332|      2240|           WN|     2608| N733SW|              105|           105|     89|      52|      52|   SMF| PHX|     647|     7|      9|        0|       0|          49|           0|       0|            0|                3|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|   2128|      2035|   2245|      2200|           WN|      139|   N348|               77|            85|     66|      45|      53|   SMF| SAN|     480|     3|      8|        0|       0|           0|           0|       3|            0|               42|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|    935|       940|   1048|      1105|           WN|      747|   N358|               73|            85|     63|     -17|      -5|   SMF| SAN|     480|     2|      8|        0|       0|           0|           0|       0|            0|                0|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|   1251|      1245|   1405|      1410|           WN|      933|   N413|               74|            85|     65|      -5|       6|   SMF| SAN|     480|     2|      7|        0|       0|           0|           0|       0|            0|                0|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|   1729|      1645|   1843|      1810|           WN|     1054|   N416|               74|            85|     64|      33|      44|   SMF| SAN|     480|     3|      7|        0|       0|           3|           0|       0|            0|               30|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|    825|       825|    941|       950|           WN|     1106| N383SW|               76|            85|     63|      -9|       0|   SMF| SAN|     480|     3|     10|        0|       0|           0|           0|       0|            0|                0|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|   1042|      1040|   1158|      1205|           WN|     1554| N316SW|               76|            85|     66|      -7|       2|   SMF| SAN|     480|     2|      8|        0|       0|           0|           0|       0|            0|                0|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|   1726|      1725|   1839|      1850|           WN|     1604| N691WN|               73|            85|     63|     -11|       1|   SMF| SAN|     480|     3|      7|        0|       0|           0|           0|       0|            0|                0|[2007.0,1.0,1.0,1...|\n",
            "|2007|    1|         1|        1|   1849|      1820|   2016|      1940|           WN|     1975| N308SW|               87|            80|     69|      36|      29|   SMF| SAN|     480|     3|     15|        0|       0|          20|           0|       7|            0|                9|[2007.0,1.0,1.0,1...|\n",
            "+----+-----+----------+---------+-------+----------+-------+----------+-------------+---------+-------+-----------------+--------------+-------+--------+--------+------+----+--------+------+-------+---------+--------+------------+------------+--------+-------------+-----------------+--------------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l0DzZHBJwjL2",
        "outputId": "cad49144-0b22-4786-c076-352ff3b428dd"
      },
      "source": [
        "#dataframe schema\n",
        "df.printSchema()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "root\n",
            " |-- Year: integer (nullable = true)\n",
            " |-- Month: integer (nullable = true)\n",
            " |-- DayofMonth: integer (nullable = true)\n",
            " |-- DayOfWeek: integer (nullable = true)\n",
            " |-- DepTime: string (nullable = true)\n",
            " |-- CRSDepTime: integer (nullable = true)\n",
            " |-- ArrTime: string (nullable = true)\n",
            " |-- CRSArrTime: integer (nullable = true)\n",
            " |-- UniqueCarrier: string (nullable = true)\n",
            " |-- FlightNum: integer (nullable = true)\n",
            " |-- TailNum: string (nullable = true)\n",
            " |-- ActualElapsedTime: string (nullable = true)\n",
            " |-- CRSElapsedTime: string (nullable = true)\n",
            " |-- AirTime: string (nullable = true)\n",
            " |-- ArrDelay: string (nullable = true)\n",
            " |-- DepDelay: string (nullable = true)\n",
            " |-- Origin: string (nullable = true)\n",
            " |-- Dest: string (nullable = true)\n",
            " |-- Distance: integer (nullable = true)\n",
            " |-- TaxiIn: string (nullable = true)\n",
            " |-- TaxiOut: string (nullable = true)\n",
            " |-- Cancelled: integer (nullable = true)\n",
            " |-- Diverted: integer (nullable = true)\n",
            " |-- CarrierDelay: string (nullable = true)\n",
            " |-- WeatherDelay: string (nullable = true)\n",
            " |-- NASDelay: string (nullable = true)\n",
            " |-- SecurityDelay: string (nullable = true)\n",
            " |-- LateAircraftDelay: string (nullable = true)\n",
            " |-- features: vector (nullable = true)\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YGYFrQbyzlWb",
        "outputId": "1583cb4c-e300-4000-99f8-2287cbea7f23"
      },
      "source": [
        "df.describe().show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
n",
            "|summary|              Year|             Month|        DayofMonth|         DayOfWeek|           DepTime|        CRSDepTime|          ArrTime|        CRSArrTime|UniqueCarrier|         FlightNum| TailNum| ActualElapsedTime|   CRSElapsedTime|           AirTime|         ArrDelay|          DepDelay|  Origin|    Dest|         Distance|           TaxiIn|           TaxiOut|           Cancelled|            Diverted|      CarrierDelay|      WeatherDelay|          NASDelay|      SecurityDelay| LateAircraftDelay|\n",
n",
            "|  count|          14379556|          14379556|          14379556|          14379556|          14379556|          14379556|         14379556|          14379556|     14379556|          14379556|14379556|          14379556|         14379556|          14379556|         14379556|          14379556|14379556|14379556|         14379556|         14379556|          14379556|            14379556|            14379556|          14379556|          14379556|          14379556|           14379556|          14379556|\n",
            "|   mean|2007.4816812841786| 6.454476341272289|15.732858928328524|3.9301324046444828|1336.6053745537095| 1328.134856806427|1481.694040313975|1494.8058040874141|         null|2204.7338766231724|     0.0|126.80748153331646| 128.081183461716|103.39938955346491|9.210389338890748|10.706914663404946|    null|    null|723.5699621740755|6.772917240660802| 16.37352036764854|0.014938013385114255|0.002395206082858191|5.8874010545419955|1.1553993650649381| 6.056209641291319|0.03243755851852644| 7.760719235155202|\n",
            "| stddev|0.4996643293381873|3.4162127373646998| 8.790067473344287|1.9905348465318955|478.99562249401947|464.52997590420705|506.2552871726799| 482.1274113248579|         null|1968.4177137875024|     0.0| 70.70197625037473|69.95936958533657| 67.85862938491579|38.93197531040201| 35.74822199614117|    null|    null|562.6494168366695|5.048900626900593|11.596478887030207| 0.12130486455430879|0.048882197545221814| 25.56751967043698| 11.92205121828925|20.377812371376248| 1.2455339608016194|25.927557077174615|\n",
            "|    min|              2007|                 1|                 1|                 1|                 1|                 0|                1|                 0|           9E|                 1|       0|               100|              -10|                 0|               -1|                -1|     ABE|     ABE|               11|                0|                 0|                   0|                   0|                 0|                 0|                 0|                  0|                 0|\n",
            "|    max|              2008|                12|                31|                 7|                NA|              2359|               NA|              2400|           YV|              9743|  Unknow|                NA|               NA|                NA|               NA|                NA|     YUM|     YUM|             4962|               NA|                NA|                   1|                   1|                NA|                NA|                NA|                 NA|                NA|\n",
n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ayht2RaAwrGN"
      },
      "source": [
        "month_wise_df=df.groupBy(df['Year'].alias('YEAR'), df['Month'].alias('MONTH')).sum('Cancelled').alias('FLIGHTS_CANCELLED')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Npg6Okhs5Gp7"
      },
      "source": [
        "month_wise_df_2007 = month_wise_df.filter(month_wise_df['YEAR'] == 2007)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wXCbfF2Y5nRL",
        "outputId": "325a80a9-ddc9-4dad-fe4f-41b0ffef85b7"
      },
      "source": [
        "month_wise_df_2007.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "+----+-----+--------------+\n",
            "|YEAR|MONTH|sum(Cancelled)|\n",
            "+----+-----+--------------+\n",
            "|2007|    6|         17243|\n",
            "|2007|    1|         15777|\n",
            "|2007|   10|          7327|\n",
            "|2007|    9|          6507|\n",
            "|2007|    8|         12295|\n",
            "|2007|    4|         11138|\n",
            "|2007|    5|          6841|\n",
            "|2007|   11|          6279|\n",
            "|2007|    2|         25465|\n",
            "|2007|   12|         21493|\n",
            "|2007|    7|         13506|\n",
            "|2007|    3|         16855|\n",
            "+----+-----+--------------+\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_v_nHggH5Wpv"
      },
      "source": [
        "month_wise_df_2008 = month_wise_df.filter(month_wise_df['YEAR'] == 2008)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "teJj9e8M5vRk",
        "outputId": "8dbe7801-dc21-4817-b287-4dd07290dc62"
      },
      "source": [
        "month_wise_df_2008.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "+----+-----+--------------+\n",
            "|YEAR|MONTH|sum(Cancelled)|\n",
            "+----+-----+--------------+\n",
            "|2008|    8|          3272|\n",
            "|2008|    1|          7356|\n",
            "|2008|    6|          3816|\n",
            "|2008|   12|         12335|\n",
            "|2008|   10|          2376|\n",
            "|2008|    9|          2052|\n",
            "|2008|   11|          2403|\n",
            "|2008|    7|          4211|\n",
            "|2008|    5|          1618|\n",
            "|2008|    4|          2740|\n",
            "|2008|    3|          4640|\n",
            "|2008|    2|          7257|\n",
            "+----+-----+--------------+\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YJylZnvc0dYl"
      },
      "source": [
        "x = month_wise_df_2007.toPandas()['MONTH'].values.tolist()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IkFiAlk91qGd"
      },
      "source": [
        "y = month_wise_df_2007.toPandas()['sum(Cancelled)'].values.tolist()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "U5kQ-B3eyV7_",
        "outputId": "f7c099b6-b7b3-40d8-9363-47afdab84dc2"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "plt.bar(x,y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 12 artists>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 56
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UsqZK4oy6TF6"
      },
      "source": [
        "x = month_wise_df_2008.toPandas()['MONTH'].values.tolist()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YDM-n9F46UgN"
      },
      "source": [
        "y = month_wise_df_2008.toPandas()['sum(Cancelled)'].values.tolist()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "6Bdi2S7W6WyF",
        "outputId": "3de254ef-0767-4c33-f8bb-6992c70c2b1a"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "plt.bar(x,y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 12 artists>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H6wY9rQjgU5o",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "00cfad2a-2215-4416-98e1-c0eaa8c6f374"
      },
      "source": [
        "# What's the number of null values ?\n",
        "\n",
        "null_counts = df.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) \n",
        "                         for c in df.columns]).toPandas().to_dict(orient='records')\n",
        "\n",
        "print(f\"We have {sum(null_counts[0].values()):d} null values in this dataset.\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "We have 14248147 null values in this dataset.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zAOe1qE-gfOs"
      },
      "source": [
        "# Drop null columns and inputs ?\n",
        "\n",
        "df = df.drop(df.CancellationCode)\n",
        "df = df.na.drop()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B2rnFflugfSL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "264f7162-570d-441d-93ec-625f9cb6b7ca"
      },
      "source": [
        "# Confirm there are no null values\n",
        "\n",
        "null_counts = df.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) \n",
        "                         for c in df.columns]).toPandas().to_dict(orient='records')\n",
        "\n",
        "print(f\"We have {sum(null_counts[0].values()):d} null values in this dataset.\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "We have 0 null values in this dataset.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a3oIOyVSWQb2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f0aea838-2121-416a-dece-da5ed26cc4e9"
      },
      "source": [
        "# What's the data shape after cleaning ?\n",
        "\n",
        "print(f\"The shape is {df.count():d} rows by {len(df.columns):d} columns.\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The shape is 14379556 rows by 28 columns.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iQyE4UJJI1i8"
      },
      "source": [
        "## Set up and run our classifier in Spark"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e98yIqdmKWcK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "653c8e9c-e5fc-40fb-81d0-38546d24132a"
      },
      "source": [
        "# What are the column's type ?\n",
        "\n",
        "df.dtypes"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('Year', 'int'),\n",
              " ('Month', 'int'),\n",
              " ('DayofMonth', 'int'),\n",
              " ('DayOfWeek', 'int'),\n",
              " ('DepTime', 'string'),\n",
              " ('CRSDepTime', 'int'),\n",
              " ('ArrTime', 'string'),\n",
              " ('CRSArrTime', 'int'),\n",
              " ('UniqueCarrier', 'string'),\n",
              " ('FlightNum', 'int'),\n",
              " ('TailNum', 'string'),\n",
              " ('ActualElapsedTime', 'string'),\n",
              " ('CRSElapsedTime', 'string'),\n",
              " ('AirTime', 'string'),\n",
              " ('ArrDelay', 'string'),\n",
              " ('DepDelay', 'string'),\n",
              " ('Origin', 'string'),\n",
              " ('Dest', 'string'),\n",
              " ('Distance', 'int'),\n",
              " ('TaxiIn', 'string'),\n",
              " ('TaxiOut', 'string'),\n",
              " ('Cancelled', 'int'),\n",
              " ('Diverted', 'int'),\n",
              " ('CarrierDelay', 'string'),\n",
              " ('WeatherDelay', 'string'),\n",
              " ('NASDelay', 'string'),\n",
              " ('SecurityDelay', 'string'),\n",
              " ('LateAircraftDelay', 'string')]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UPJdcVZhI4Sx"
      },
      "source": [
        "# Create list of feature columns\n",
        "\n",
        "feature_cols = ['Year', 'Month', 'DayofMonth', 'DayOfWeek', 'CRSDepTime', \n",
        "                'CRSArrTime', 'FlightNum', 'Distance', 'Diverted']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N4ZETOBtKKlP"
      },
      "source": [
        "# Generate and create our new feature vector column\n",
        "\n",
        "df = VectorAssembler(inputCols=feature_cols, outputCol=\"features\").transform(df)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bgWPhJ9XK3Fo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b7715c34-1fd7-46d1-cd22-86874b4bce04"
      },
      "source": [
        "# Select input columns\n",
        "\n",
        "df.select(\"Cancelled\", \"features\").show(5)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "+---------+--------------------+\n",
            "|Cancelled|            features|\n",
            "+---------+--------------------+\n",
            "|        0|[2007.0,1.0,1.0,1...|\n",
            "|        0|[2007.0,1.0,1.0,1...|\n",
            "|        0|[2007.0,1.0,1.0,1...|\n",
            "|        0|[2007.0,1.0,1.0,1...|\n",
            "|        0|[2007.0,1.0,1.0,1...|\n",
            "+---------+--------------------+\n",
            "only showing top 5 rows\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NtUJFbbA-xfL"
      },
      "source": [
        "from pyspark.ml.stat import Correlation\n",
        "# get correlation matrix\n",
        "features = ['Year', 'Month', 'DayofMonth', 'DayOfWeek', 'CRSDepTime', \n",
        "                'CRSArrTime', 'FlightNum', 'Distance', 'Diverted', 'Cancelled']\n",
        "df = VectorAssembler(inputCols=features, outputCol=\"corr_features\").transform(df)\n",
        "matrix = Correlation.corr(df.select(\"corr_features\"), \"corr_features\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PUPSozjRAZa4"
      },
      "source": [
        "mat = matrix.collect()[0][\"pearson({})\".format(\"corr_features\")].values"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kbP3D8hrD9Tv"
      },
      "source": [
        "mat = mat.reshape((10,10))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hGMQR857FrU5",
        "outputId": "424b4eee-6b10-494b-a737-ee5050c67ee0"
      },
      "source": [
        "mat"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1.00000000e+00, -1.83435829e-02,  8.22722605e-04,\n",
              "        -1.91161193e-03, -5.49675153e-03, -1.26113505e-03,\n",
              "         8.77251767e-03,  6.93796550e-03,  1.91600857e-03,\n",
              "        -5.66680050e-02],\n",
              "       [-1.83435829e-02,  1.00000000e+00,  6.03611680e-03,\n",
              "         4.64788196e-03, -5.44457940e-03, -1.20917200e-03,\n",
              "        -2.99675906e-03,  8.60267423e-05,  4.32656744e-04,\n",
              "        -1.42907151e-02],\n",
              "       [ 8.22722605e-04,  6.03611680e-03,  1.00000000e+00,\n",
              "        -1.57422799e-04, -1.17655871e-03, -1.30455868e-03,\n",
              "        -6.45790259e-04,  1.29977968e-03,  1.69891463e-03,\n",
              "         1.24476172e-03],\n",
              "       [-1.91161193e-03,  4.64788196e-03, -1.57422799e-04,\n",
              "         1.00000000e+00,  6.44629808e-03,  5.90711902e-03,\n",
              "        -1.93224509e-03,  1.54456460e-02,  1.68944579e-04,\n",
              "        -3.55008959e-03],\n",
              "       [-5.49675153e-03, -5.44457940e-03, -1.17655871e-03,\n",
              "         6.44629808e-03,  1.00000000e+00,  7.90180364e-01,\n",
              "        -1.29452996e-02, -1.05211163e-02, -9.50556319e-04,\n",
              "         1.55970861e-02],\n",
              "       [-1.26113505e-03, -1.20917200e-03, -1.30455868e-03,\n",
              "         5.90711902e-03,  7.90180364e-01,  1.00000000e+00,\n",
              "        -2.59974156e-02,  4.34924197e-02,  7.20770687e-03,\n",
              "         1.27114689e-02],\n",
              "       [ 8.77251767e-03, -2.99675906e-03, -6.45790259e-04,\n",
              "        -1.93224509e-03, -1.29452996e-02, -2.59974156e-02,\n",
              "         1.00000000e+00, -3.46581677e-01, -1.39853451e-03,\n",
              "         5.46120758e-02],\n",
              "       [ 6.93796550e-03,  8.60267423e-05,  1.29977968e-03,\n",
              "         1.54456460e-02, -1.05211163e-02,  4.34924197e-02,\n",
              "        -3.46581677e-01,  1.00000000e+00,  1.90128695e-02,\n",
              "        -3.54358296e-02],\n",
              "       [ 1.91600857e-03,  4.32656744e-04,  1.69891463e-03,\n",
              "         1.68944579e-04, -9.50556319e-04,  7.20770687e-03,\n",
              "        -1.39853451e-03,  1.90128695e-02,  1.00000000e+00,\n",
              "        -6.03402106e-03],\n",
              "       [-5.66680050e-02, -1.42907151e-02,  1.24476172e-03,\n",
              "        -3.55008959e-03,  1.55970861e-02,  1.27114689e-02,\n",
              "         5.46120758e-02, -3.54358296e-02, -6.03402106e-03,\n",
              "         1.00000000e+00]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 613
        },
        "id": "OEkwxHuREQyK",
        "outputId": "a9da2aea-1bae-4369-bb69-62607f2523cf"
      },
      "source": [
        "import seaborn as sns\n",
        "plt.figure(figsize=(9,9))\n",
        "sns.heatmap(mat, annot = True, xticklabels=features, yticklabels=features)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f9c4e002518>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 103
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 648x648 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FZrvTdxBLA2-"
      },
      "source": [
        "# Build the training indexers\n",
        "\n",
        "# Generate a labelIndexer\n",
        "labelIndexer = StringIndexer(inputCol=\"Cancelled\", outputCol=\"indexedLabel\").fit(df)\n",
        "\n",
        "# Generate the indexed feature vector\n",
        "featureIndexer = VectorIndexer(inputCol=\"features\", outputCol=\"indexedFeatures\", maxCategories=4).fit(df)\n",
        "    \n",
        "# Split the data into training and tests sets\n",
        "(trainingData, testData) = df.randomSplit([TRAINING_DATA_RATIO, 1 - TRAINING_DATA_RATIO])\n",
        "\n",
        "# Train the RandomForest model\n",
        "rf = RandomForestClassifier(labelCol=\"indexedLabel\", featuresCol=\"indexedFeatures\", numTrees=RF_NUM_TREES)\n",
        "\n",
        "# Chain indexers and the forest models in a Pipeline\n",
        "pipeline = Pipeline(stages=[labelIndexer, featureIndexer, rf])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hjE_avVbLfmP"
      },
      "source": [
        "# Train the model\n",
        "\n",
        "model = pipeline.fit(trainingData)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SderkFFTSNw2"
      },
      "source": [
        "# Make predictions\n",
        "\n",
        "predictions = model.transform(testData)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sSOdyvSpLl9e"
      },
      "source": [
        "## Evaluate our model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NTGwK2jkLlKJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3f95d084-0ee1-4751-d160-13b710cfb05a"
      },
      "source": [
        "# Select prediction, true label and compute test error\n",
        "evaluator = MulticlassClassificationEvaluator(\n",
        "    labelCol=\"indexedLabel\", predictionCol=\"prediction\", metricName=\"accuracy\")\n",
        "accuracy = evaluator.evaluate(predictions)\n",
        "\n",
        "print(f\"Test Error = {(1.0 - accuracy):g}\")\n",
        "print(f\"Accuracy = {accuracy:g}\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Test Error = 0.0148504\n",
            "Accuracy = 0.98515\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}